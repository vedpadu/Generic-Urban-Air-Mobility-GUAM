%% sim parameters
model = 'GUAM';
% use timeseries input
userStruct.variants.refInputType=3; % 1=FOUR_RAMP, 2= ONE_RAMP, 3=Timeseries, 4=Piecewise Bezier, 5=Default(doublets)
%userStruct.variants.vehicleType = 1;

%% setup trajectory and pass to target
%time        = [0 10:1:40]'; % Column vector of time points
%time = [0 10 12 22 25 35]';
time = [0 10 13 14 23 26 27 3]';
N_time = length(time);

vel     = zeros(N_time, 3);
vel_i   = zeros(N_time, 3);
pos     = zeros(N_time, 3);
chi     = zeros(N_time, 3);
chid    = zeros(N_time, 3);

% define trajectory as climbing right hand turn for 90 deg
% prescibe inertial position (NED)
%pos = zeros([N_time 3]);
%pos = [0 0 0; 0 0 -100; 0 0 -100; 200 0 -100; 200 0 -100; 200 0 0];

pos = [0 0 0; 0 0 -100; 0 0 -100; 0 0 -100; 200 0 -100; 200 0 -100];
% pos(1:5, 3) = linspace(0, -100, 5);
% pos(6:16, 3) = -100;
% %pos(6:16, 3) = -100;
% pos(6:16, 1) = linspace(0, 200, 11);
% pos(17:21, 1) = 200;
% pos(17:21, 3) = linspace(-100, 0, 5);
% pos(17:21, 1) = linspace(200, 300, 5);

%pos(16:20, 3) = 
 %pos     = [0 0 linspace(0, 100, 20)]; % Inertial Positions (x,y,-z) row vector for each time
%cir_xy = [2000;0]'+[sind([0:3:90])*4000; cosd([0:3:90])*-4000+4000]';
%cir_xy = [1800;0]'+[sind([0:3:90])*3600; cosd([0:3:90])*-3600+3600]';

%pos = [pos;[cir_xy [0:30]'*-100/30-100]];

% Compute velocity
% vel_i(1:5,1)  = gradient(pos(1:5,1))./gradient(time(1:5)); 
% vel_i(1:5,2)  = gradient(pos(1:5,2))./gradient(time(1:5)); 
% vel_i(1:5,3)  = gradient(pos(1:5,3))./gradient(time(1:5)); 
% vel_i(5, 1) = 0;
% vel_i(5, 2) = 0;
% vel_i(5, 3) = 0;
% vel_i(6:15,1)  = gradient(pos(6:15,1))./gradient(time(6:15)); 
% vel_i(6:15,2)  = gradient(pos(6:15,2))./gradient(time(6:15)); 
% vel_i(6:15,3)  = gradient(pos(6:15,3))./gradient(time(6:15)); 
% vel_i(15, 1) = 0;
% vel_i(15, 2) = 0;
% vel_i(15, 3) = 0;
% vel_i(16:20,1)  = gradient(pos(16:20,1))./gradient(time(16:20)); 
% vel_i(16:20,2)  = gradient(pos(16:20,2))./gradient(time(16:20)); 
% vel_i(16:20,3)  = gradient(pos(16:20,3))./gradient(time(16:20)); 
% vel_i(:,1)  = gradient(pos(:,1))./gradient(time); 
% vel_i(:,2)  = gradient(pos(:,2))./gradient(time); 
% vel_i(:,3)  = gradient(pos(:,3))./gradient(time); 

%vel_i = [0 0 -10; 0 0 0; 20 0 0; 0 0 0; 0 0 10; 0 0 0];
vel_i = [0 0 -10; 0 0 -4; 0 0 0; 20 0 0; 7 0 0; 0 0 0];

% Compute heading
chi     = atan2(vel_i(:,2),vel_i(:,1));
chid    = gradient(chi)./gradient(time);

% add stars library blocks for quaternion functions
addpath(genpath('lib'));

% compute velocity in heading frame
q = QrotZ(chi);
vel = Qtrans(q,vel_i);

% setup trajectory to match bus
RefInput.Vel_bIc_des    = timeseries(vel,time); % Heading frame velocity
RefInput.pos_des        = timeseries(pos,time); % Inertial Position
RefInput.chi_des        = timeseries(chi,time); % Heading Angle
RefInput.chi_dot_des    = timeseries(chid,time); % Heading Angle Rate
RefInput.vel_des        = timeseries(vel_i,time); % Inertial Velocity

%target = struct('tas', 110, 'gndtrack', 0, 'stopTime', 10);
target.RefInput = RefInput;

%% Prepare to run simulation
% set initial conditions and add trajectory to SimInput
simSetup;
open(model);
